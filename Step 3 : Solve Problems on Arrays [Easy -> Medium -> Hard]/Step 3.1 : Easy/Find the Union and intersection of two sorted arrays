// ----> 1st approach <----

class Solution{
    public:
    
    vector<int> findUnion(int arr1[], int arr2[], int n, int m)
    {
        set<int>st;
        
        for(int i = 0; i<n; i++)
        {
            st.insert(arr1[i]);
        }
        
        for(int i = 0; i<m; i++)
        {
            st.insert(arr2[i]);
        }
    
        vector<int>ans;
        
        for(auto it: st)
        {
            ans.push_back(it);
        }
        return ans;
    }
};



// ----> 2nd approach <-----


//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution{
    public:
    
    vector<int> findUnion(int arr1[], int arr2[], int n, int m)
    {
        int i = 0, j = 0;
        
        vector <int> unio;
        
        while (i < n && j < m)
        {
            // Case 1 & Case 2 check
            if(arr1[i] < arr2[j])
            {
                if(unio.size() == 0 || unio.back() != arr1[i])
                    unio.push_back(arr1[i]);
                i++;
            }
            else if (arr1[i] == arr2[j])
            {
                if(unio.size() == 0 || unio.back() != arr1[i])
                    unio.push_back(arr1[i]);
                i++;
                j++;
            }
            else // The 3rd case is dealt here
            {
                if(unio.size() == 0 || unio.back() != arr2[j])
                // Silly typo mistakes create errors ^^-)
                    unio.push_back(arr2[j]);
                j++;
            }
        }
        // Now lets deal with remaining elements of both arrays.
        while (i < n)
        {
            if(unio.back() != arr1[i])
                    unio.push_back(arr1[i]);
                i++;
        }
        while (j < m)
        {
            if(unio.back() != arr2[j])
                    unio.push_back(arr2[j]);
                j++;
        }
    
        return unio;
    }
};

//{ Driver Code Starts.

int main() {
	
	int T;
	cin >> T;
	
	while(T--){
	    
	    
	    
	    int N, M;
	    cin >>N >> M;
	    
	    int arr1[N];
	    int arr2[M];
	    
	    for(int i = 0;i<N;i++){
	        cin >> arr1[i];
	    }
	    
	    for(int i = 0;i<M;i++){
	        cin >> arr2[i];
	    }
	    Solution ob;
	    vector<int> ans = ob.findUnion(arr1,arr2, N, M);
	    for(int i: ans)cout<<i<<' ';
	    cout << endl;
	    
	}
	
	return 0;
}
// } Driver Code Ends
