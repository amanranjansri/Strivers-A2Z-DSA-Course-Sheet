class Solution {
public:
    void dfs(int root, vector<int>&visit, vector<int>adj[])
    {
        visit[root] = 1;

        for(auto it : adj[root])
        {
            if(!visit[it])
            {
                dfs(it, visit, adj);
            }
        }
    }
    int findCircleNum(vector<vector<int>>& isConnected) {
        int size = isConnected.size();
        vector<int>adj[size];

       for(int i=0;i<size;i++){
            for(int j=0;j<size;j++){
                if(isConnected[i][j]){
                    adj[i].push_back(j);
                    adj[j].push_back(i);
                }
            }
        }

        vector<int>visit(size,0);
        int count = 0;

        for(int i = 0; i < size; i++)
        {
            if(!visit[i])
            {
                count++;
                dfs(i, visit, adj);
            }
        }
        return count;
    }
};
