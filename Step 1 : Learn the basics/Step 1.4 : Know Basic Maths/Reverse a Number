//--> LeetCode <--

class Solution {
public:
    int reverse(int x) {
        
        int ans = x;
        long long int rem = 0;

        while(ans != 0)
        {
            int digit = ans%10;
            rem = (rem * 10) + digit;
            if ((rem > INT_MAX)||(rem< INT_MIN))
            {
                return 0;
            }
            ans = ans/10;
        }
        return rem;
    }
};



//--> CodeStudio <--

#include<iostream>
using namespace std;

int main() {
	int n;
	cin >> n;

	int rem = 0;
	while(n != 0)
	{
		int digit = n%10;
		rem = rem * 10 + digit;
		n = n/10;
	}
	cout<< rem;
}




// --> GFG <--


//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    long long reversedBits(long long X) {
        
        long long result = 0;
        int shift = 31;
        
        while(X != 0)
        {
            result = result + ((X & 1)<<shift);
            shift--;
            
           X =  X>>1;
        }
        return result;
    }
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        long long X;
        
        cin>>X;

        Solution ob;
        cout << ob.reversedBits(X) << endl;
    }
    return 0;
}
// } Driver Code Ends
