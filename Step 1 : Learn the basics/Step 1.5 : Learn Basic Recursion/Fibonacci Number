// --> LeetCode <--

class Solution {
public:
    int fib(int n) {
        //base condition

        if(n==0)
        {
            return 0;
        }
        if(n==1)
        {
            return 1;
        }
        //recursive relation
        return fib(n-1)+fib(n-2);
        
    }
};

// --> GFG <--
// --> 1st approach

class Solution
{
    public:
    //Function to return list containing first n fibonacci numbers.
    vector<long long> printFibb(int n) 
    {
        vector<long long> ans(n);
        
        ans[0] = ans[1] = 1;
        
        for(int i = 2; i<n; i++)
        {
            ans[i] = ans[i-1] + ans[i-2];
        }
        return ans;
    }
};


// --> 2nd approach


class Solution
{
    public:
    //Function to return list containing first n fibonacci numbers.
    vector<long long> printFibb(int n) 
    {
        vector<long long> ans{1,1};
        
        //base case
        if(n == 1)
        {
            return {1};
        }
        if(n == 2)
        {
            return {1,1};
        }
        
        //recursive call
        for(int i =0; i<n-2; i++)
        {
            long long answer = ans[i] + ans[i+1];
            ans.push_back(answer);
        }
        return ans;
    }
};

// --> 3rd approach

//{ Driver Code Starts
//Initial function template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function template for C++


class Solution
{
    public:
    //Function to return list containing first n fibonacci numbers.
    vector<long long> printFibb(int n) 
    {
        vector<long long> ans{1,1};
        
        //base case
        if(n == 1)
        {
            return {1};
        }
        if(n == 2)
        {
            return {1};
        }
        
        //recursive call
        for(int i =2; i<n; i++)
        {
            long long answer = ans[i-1] + ans[i-2];
            ans.push_back(answer);
        }
        return ans;
    }
};

//{ Driver Code Starts.
int main()
 {
     //taking total testcases
    int t;
    cin>>t;
    while(t--)
    {
        //taking number of elements
        int n;
        cin>>n;
        Solution obj;
        //calling function printFibb()
        vector<long long> ans = obj.printFibb(n);
        
        //printing the elements of vector
        for(long long i:ans)cout<<i<<' ';
        cout<<endl;
    }
	return 0;
}

// } Driver Code Ends
