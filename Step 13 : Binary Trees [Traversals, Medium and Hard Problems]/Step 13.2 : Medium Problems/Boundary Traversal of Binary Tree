#include <bits/stdc++.h> 
/************************************************************

    Following is the Binary Tree node structure:
    
    template <typename T>
    class TreeNode {
        public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/
bool isleaf(TreeNode<int>* root)
{
    if(root -> left == NULL && root -> right == NULL)
    {
        return true;
    }
    return false;
}

void leftroot(TreeNode<int>* root, vector<int>&ans)
{
    while(root != NULL)
    {
        if(!isleaf(root))
        {
            ans.push_back(root -> data);
        }
        if(root -> left != NULL)
        {
            root = root -> left;
        }
        else
        {
            root = root -> right;
        }
    }
}

void leafroot(TreeNode<int>* root, vector<int>&ans)
{
    if(isleaf(root))
    {
        ans.push_back(root -> data);
        return;
    }
    if(root -> left)
    {
        leafroot(root -> left, ans);
    }
    if(root  -> right)
    {
        leafroot(root -> right, ans);
    }
}

void rightroot(TreeNode<int>* root, vector<int>&ans)
{
    vector<int> temp;
    
    while(root)
    {
        if(!isleaf(root))
        {
            temp.push_back(root -> data);
        }
        if(root -> right)
        {
            root = root -> right;
        }
        else{
            root = root -> left;
        }
    }
    for(int i = temp.size()-1; i >= 0; i--)
    {
        ans.push_back(temp[i]);
    }
}
vector<int> traverseBoundary(TreeNode<int>* root){
    // Write your code here.
    vector<int>ans;
    
    if(root == NULL)
    {
        return ans;
    }
    if(!isleaf(root))
    {
        ans.push_back(root -> data);
    }

    leftroot(root -> left, ans);
    leafroot(root, ans);
    rightroot(root -> right, ans);

    return ans;
}
